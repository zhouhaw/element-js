import BigNumber from 'bignumber.js';
import { Network, Schema } from './schema/types';
import { Asset, ECSignature, ElementAsset, ElementSchemaName, Order, OrderJSON, OrderSide, UnhashedOrder, UnsignedOrder } from './types';
export { encodeBuy, encodeSell } from './schema';
export declare const NULL_ADDRESS = "0x0000000000000000000000000000000000000000";
export declare function registerProxy(proxyRegistryContract: any, account: string): Promise<string | boolean>;
export declare function makeBigNumber(arg: number | string | BigNumber): BigNumber;
export declare function orderParamsEncode(order: any): any[];
export declare function orderSigEncode(order: any): any[];
export declare function getOrderHash(web3: any, exchangeHelper: any, order: UnhashedOrder): Promise<any>;
export declare function validateOrder(exchangeHelper: any, order: UnhashedOrder): Promise<any>;
export declare function orderCanMatch(buy: Order, sell: Order): boolean;
export declare function hashOrder(web3: any, order: any): string;
export declare function validateAndFormatWalletAddress(web3: any, address: string): string;
export declare function getSchema(network: Network, schemaName?: ElementSchemaName): Schema<any>;
export declare function getElementAsset(schema: Schema<ElementAsset>, asset: Asset, quantity?: BigNumber): ElementAsset;
export declare function generatePseudoRandomSalt(): BigNumber;
export declare function getPriceParameters(network: Network, orderSide: OrderSide, tokenAddress: string, expirationTime: number, startAmount: number, endAmount?: number, waitingForBestCounterOrder?: boolean, englishAuctionReservePrice?: number): {
    basePrice: BigNumber;
    extra: BigNumber;
    paymentToken: string;
    reservePrice: number | undefined;
};
export declare const MIN_EXPIRATION_SECONDS = 10;
export declare const ORDER_MATCHING_LATENCY_SECONDS: number;
export declare function getTimeParameters(expirationTimestamp: number, listingTimestamp?: number, waitingForBestCounterOrder?: boolean): {
    listingTime: BigNumber;
    expirationTime: BigNumber;
};
export declare function signOrderHash(web3: any, hashedOrder: UnsignedOrder): Promise<ECSignature>;
export declare function validateAndPostOrder(web3: any, order: any): Promise<any>;
export declare const orderToJSON: (order: Order) => OrderJSON;
export declare const orderFromJSON: (order: any) => Order;
export declare const INVERSE_BASIS_POINT = 10000;
export declare function estimateCurrentPrice(order: Order, secondsToBacktrack?: number, shouldRoundUp?: boolean): BigNumber;
export declare function getTokenList(network: Network): Array<any>;
